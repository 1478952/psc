/**
 * [설명]
 * validator.js
 * FORM SUBMIT과 onload시에 validation을 체크한다.
 *
 * [사용예]
 * <form name="formname" id='formname' action="http://www.naver.com" method="post">
 *    아이디 : <input type="text" name="mb_id" class="button {label:'회원아이디',required:true,memberid:true,minlength:4,uniq:'[beanid, methodName]'}" /><br />
 *    비밀번호 : <input type="text" name="mb_pw" class="{label:'비밀번호',required:true, range:[8,20]}" /><br />
 *    비밀번호확인 : <input type="text" name="mb_pw2" class="{label:'비밀번호확인',equal:'mb_pw'}" /><br />
 *    이름 : <input type="text" name="mb_name" class="{label:'이름',required:true,hangul2:true}" /><br />
 *    이메일 : <input type="text" name="mb_email" class="{label:'이메일',email:true}" /><br />
 *    전화번호 : <input type="text" name="mb_tel" class="{label:'전화번호',required:true,phonenumber:true}" /><br />
 * 	  취미 : <input type="checkbox" name="mb_recemail[]" value="축구" class="{label:'취미',groupcheck:true}" />축구,
 *	        <input type="checkbox" name="mb_recemail[]" value="야구" />야구,
 *	        <input type="checkbox" name="mb_recemail[]" value="농구" />농구
 *	  가입선물:
 *	        <input type="radio" name="mb_gift" class="{label:'가입선물',groupcheck:true}" value="된장" />된장,
 *	        <input type="radio" name="mb_gift" value="고추장" />고추장,
 *	        <input type="radio" name="mb_gift" value="쌈장" />쌈장
 *	  직업 :  <select name="mb_job" class="{label:'직업',required:true}">
 *		     <option value=''>== 선택 ==</option>
 *		     <option value='잡부'>잡부</option>
 *		     <option value='후로그래머'>프로그래머</option>
 *		     <option value='디자이너'>디자이너</option>
 *		    </select><br />
 *	  신체포기각서 : <input type="checkbox" name="mb_agree" class="{label:'신체포기각서',required:true}" /> 동의합니다<br />
 *	  우편번호    : <input type="text" name="mb_zipcode" class="{label:'우편번호',required:true,zipcode:true}" /><br />
 * </form>
 *
 */
(function($) {
	
	/**
	 * 예)
	 * >>>>필수
	 * var obj = new Object();
	 * obj.msg = "메시지 영역";
	 * $.layerPop(obj);
	 * 
	 * >>>>선택사항
	 * obj.msgTitle = "타이틀이 있을 경우 작성"
	 * obj.url = "관련 URL 작성";
	 * obj.formId = "formId";
	 * obj.confirm = true (confirm 사용여부)
	 * obj.iconClass = "백그라운드 아이콘에 대한 클래스를 넣는다."
	 * obj.callBack = "ajax실행시 Confirm이 필요할 경우 지정하면 됩니다."
	 */
	var layerPopObj = new Object();
	$.layerPop = function(obj){
		var html="";
		var msg = obj.msg.replace(/\n/gi, "<br/>");
		msg = msg.replace(/&lt;/g, "<");
		msg = msg.replace(/&gt;/g, ">");
		
		//이동할 페이지 지정(없으면 팝업 닫기)
		html += '<div class="dimm" id="validatorPop" style="display: block;">';
		html += '	<div class="layer-pop-wrap">';
		if(obj.iconClass !=null && obj.iconClass !=undefined && obj.iconClass !=""){ //아이콘이 있으면 사용
			html += '<p class="layer-pop-txt '+obj.iconClass+'">'+msg+'</p>';
		}else{
			html += '<p class="layer-pop-txt">'+msg+'</p>';
		}
		
		//URL형식으로 direct로 넘어갈때 쓰인다.
		if(obj.url !=null && obj.url !=undefined && obj.url !=""){
			html += '	<div class="layer-btn-wrap">';
			html += '		<button type="button" class="layer-btn-typeA" onclick="location.href=\''+obj.url+'\'">'+$.message.get('message_new_confirm')+'</button>';
			html += '	</div>';
		//confirm부분 
		}else if(obj.confirm ==true || obj.confirm =="true"){
			html += '<div class="layer-btn-wrap btnNum2">';
				//submit형식으로 넘길 경우
				if(obj.formId !=null && obj.formId !=undefined && obj.formId !=""){
					html += '                <button type="button" class="layer-btn-typeA gray" onclick="$(\'#validatorPop\').remove()">'+$.message.get('message_new_cancel')+'</button>';
					html += '                <button type="button" class="layer-btn-typeA" onclick="document.getElementById(\''+obj.formId+'\').submit();">'+$.message.get('message_new_confirm')+'</button>';
				//submit형식이 아니면서 ajax로 처리해야 될 경우 callback
				}else if(obj.callBackMethod !=null && obj.callBackMethod !=undefined && obj.callBackMethod !=""){
					html += '                <button type="button" class="layer-btn-typeA gray" onclick="$(\'#validatorPop\').remove();">'+$.message.get('message_new_cancel')+'</button>';
					var callbackParam = (obj.callBackParam !=null && obj.callBackParam !=undefined && obj.callBackParam !="") ? JSON.stringify(obj.callBackParam).replace(/\"/gi, "\'") : 'null';
					var callbackfun = (typeof obj.callBackMethod == "function") ? "$.layerPopcallBack("+obj.callBackMethod+", "+callbackParam+");" : ((StringUtil.isEmpty(callbackParam) || callbackParam == 'null') ? obj.callBackMethod+'();' : obj.callBackMethod+'('+callbackParam+')');
					html += '                <button type="button" class="layer-btn-typeA" onclick="$(\'#validatorPop\').remove(); '+callbackfun+'">'+$.message.get('message_new_confirm')+'</button>';
				}
			html += '</div>';
		//submit형식으로 처리할 경우
		}else if(obj.formId !=null && obj.formId !=undefined && obj.formId !=""){
			html += '	<div class="layer-btn-wrap">';
			html += '		<button type="button" class="layer-btn-typeA" onclick="document.getElementById(\''+obj.formId+'\').submit();">'+$.message.get('message_new_confirm')+'</button>';
			html += '	</div>';
			//기본 창 닫기
		}else{
			html += '	<div class="layer-btn-wrap">';
			var callbackfun = "";
			var callbackParam = "";
			if(obj.callBackMethod !=null && obj.callBackMethod !=undefined && obj.callBackMethod !=""){
				callbackParam = (obj.callBackParam !=null && obj.callBackParam !=undefined && obj.callBackParam !="") ? JSON.stringify(obj.callBackParam).replace(/\"/gi, "\'") : 'null';
				callbackfun = (typeof obj.callBackMethod == "function")? "$.layerPopcallBack("+obj.callBackMethod+", "+callbackParam+");" : obj.callBackMethod+'();';
			}
			html += '                <button type="button" class="layer-btn-typeA" onclick="$(\'#validatorPop\').remove(); '+callbackfun+'">'+$.message.get('message_new_confirm')+'</button>';
			html += '	</div>';
		}
		html += '	</div>';
		html += '</div>';
		$("body").append(html);
	}
	
	$.layerPopcallBack = function(callback, param){
		callback(param);
	};
	
	$.validator = {
		pattern : /({.+?})/,
		error : {
			result 	: false,
			type 	: 'alert',
			msg 	: null,
			breaked : false
		},
		form : null,
		searchType : 'input[type=text]:not(:disabled), input[type=file]:not(:disabled), input[type=password]:not(:disabled), input[type=checkbox]:not(:disabled), input[type=radio]:not(:disabled), input[type=file]:not(:disabled), select:not(:disabled), textarea:not(:disabled)',
		/**
	     * @description form submit시 validate fn
	     * @method validate
	     * @public
	     * @param
	     * @return Boolean
	     */ 
		validate : function(){
			var elements;

			if ($(this).find("input[id=chk]").length > 0) {
				elements = $(this).find('input[id=chk][type=checkbox]:checked').parents('tr').find($.validator.searchType);
			} else {
				elements = $(this).find($.validator.searchType);
			}
			
			var validationCheckResult = true;
			$.validator.form = $(this);
			
			elements.each(function(index) {
				if ($(this).attr("data-required") == "true") {
					$.validator.valRequired(this);
					if($.validator.error.result) {
						$.validator.invalidProcess(this);
						validationCheckResult = false
						return validationCheckResult;
					}
				}
				
				var classValue = $(this).attr("data-type");
				var classPatternValue = (classValue != undefined) ? classValue.match($.validator.pattern) : "";
				if (classPatternValue != null && classPatternValue != "" && {required:true})
					validationCheckResult = $.validator.valid(this, classPatternValue[0]);
					
				return validationCheckResult;
			});
			$.validator.form = null;
			return validationCheckResult;
		},

		/**
	     * @description HTML ELEMENT CLASS의 패턴을 비교하여 각 형태의 validate 함수를 호출
	     * @method valid
	     * @public
	     * @param element, classPatternValue
	     * @return Boolean
	     */ 
		valid : function(element, classPatternValue){
			if(classPatternValue != null) {
				try {
					//var orule = eval('(' + classPatternValue + ')');
					var orule = ( new Function('return ' + '(' + classPatternValue + ')') )();
				} catch(e){
					this.error.result = false;
					this.error.msg = '[' + $(element).attr('name') + '] ' + $.message.get('message_v001');
					this.error.msgTitle =$(element).attr('data-Title');
					this.invalidProcess(element, orule);
					return false;
				}
				for(var key in orule) {
					//if (key == 'label' || key == 'focusid' || (!orule.required && $(element).val() == "")) continue;
					if (key == 'label' || key == 'focusid') continue;
					var methodName = 'val' + this.ucfirst(key);
					if((this && this[methodName] && this[methodName] instanceof Function) == undefined){
						this.error.result = false;
						this.error.msg = + $.message.get('message_v002') +' [' + key + ']';
						this.error.msgTitle =$(element).attr('data-Title');
					} else {
						this[methodName](element, orule);
					}
					if(this.error.result) {
						this.invalidProcess(element, orule);
						return false;
					}
					
					if (this.error.breaked) {
						this.initError();
						return false;
					}
				}
			}
			return true;
		},

		/**
	     * @description validation 오류 발생시 처리
	     * @method invalidProcess
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */ 
		invalidProcess : function(ele, o){
		//	$('.es_error').remove();
			if(this.error.type == 'print') {
				$(ele.parentNode).append("<span class='es_error' style='color : blue;font-weight : bold'>" + this.error.msg + "</span>");
				if(o != undefined && o.focusid != undefined){
					$('#' + o.focusid).focus();
				} else {
					$(ele).focus();
				}
			} else {
//				alert(this.error.msg);
				layerPopObj.msg = this.error.msg;
				layerPopObj.msgTitle = this.error.msgTitle;
				$.layerPop(layerPopObj);
				if(o != undefined && o.focusid != undefined) {
					$('#' + o.focusid).focus();
				} else {
					$(ele).focus();
				}
			}
			this.initError();
		},

		/**
	     * @description error object init
	     * @method initError
	     * @public
	     * @param void
	     * @return void
	     */
		initError : function(){
			this.error.result = false;
			this.error.msg = null;
			this.error.breaked = false;
			//팝업시 타이틀 추가
			this.error.msgTitle=null;
		},

		/**
	     * @description required 속성 처리
	     * @method valRequired
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valRequired : function(ele, o){
			if($(ele).attr('type')=='checkbox' || $(ele).attr('type')=='radio'){
				if(!ele.checked){
					this.error.result = true;
					this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v003');
					this.error.msgTitle =$(ele).attr('data-Title');
				}
			}else{
				if($(ele).val()==''){
					this.error.result = true;
					if ($(ele).attr("type") == "text" || $(ele)[0].tagName.toLowerCase() == "textarea"){
						this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v004');
						this.error.msgTitle =$(ele).attr('data-Title');
					}else{
						this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v031');
						this.error.msgTitle =$(ele).attr('data-Title');
					}
				}
			}
		},

		/**
	     * @description equal 속성 처리
	     * @method valEqual
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valEqual : function(ele, o){
	    	var index = $(this.form).find("[id=" + ele.id + "]").index(ele);
			if($(ele).val() != $(this.form).find("[id=" + o.equal + "]:eq(" + index + ")").val()){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v005');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description minlength 속성 처리
	     * @method valMinlength
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valMinlength : function(ele, o){
			if ($(ele).val().length < o.minlength){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + o.minlength + $.message.get('message_v006');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description manlength 속성 처리
	     * @method valMaxlength
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valMaxlength : function(ele, o){
			if ($(ele).val().length > o.maxlength){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + o.maxlength + $.message.get('message_v007');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},
		
		/**
	     * @description range 속성 처리
	     * @method valRange
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valRange : function(ele, o) {
			if(!o.range) return;
			var max, min;
			if (o.range[0] >= o.range[1]) {
				max = o.range[0];
				min = o.range[1];
			} else {
				max = o.range[1];
				min = o.range[0];
			}
			if (!($(ele).val().length >= min && $(ele).val().length <= max)){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + min + ' ~ ' + max + $.message.get('message_v008');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description email 속성 처리
	     * @method valEmail
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valEmail : function(ele, o){
			if(!o.email || $.trim($(ele).val()) == '') return;
			var pattern = /([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)\.([0-9a-zA-Z_-]+)/;
			if (!pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v009');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description member id 속성 처리
	     * @method valMemberid
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valMemberid : function(ele, o){
			if(!o.memberid) return;
			var pattern = /^[^a-z0-9]|[^a-z0-9_]/;
			if (pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v010');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description nospace 속성 처리
	     * @method valNospace
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valNospace : function(ele, o){
			if(!o.nospace) return;
			var pattern = /(\s)/g;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v011');
				this.error.msgTitle =$(ele).attr('data-Title');
			}

		},

		/**
	     * @description numberic 속성 처리
	     * @method valNumeric
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valNumeric : function(ele, o){
			if(!o.numeric) return;
			var pattern = /[^0-9]/;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v012');
				this.error.msgTitle =$(ele).attr('data-Title');
			}

		},

		/**
	     * @description alpha 속성 처리
	     * @method valAlpha
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valAlpha : function(ele, o){
			if(!o.alpha) return;
			var pattern = /[^a-z]/i;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v013');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description alphanumeric 속성 처리
	     * @method valAlphanumeric
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valAlphanumeric : function(ele, o){
			if(!o.alphanumeric) return;
			var pattern = /[^a-z0-9]/i;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v014');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		valAlphanumeric_ : function(ele, o){
			if(!o.alphanumeric) return;
			var pattern = /[^a-z0-9_]/i;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v015');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},
		
		/**
	     * @description money 속성 처리
	     * @method valMoney
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valMoney : function(ele, o) {
			this.valRate(ele, o);
		},
		
		/**
	     * @description rate 속성 처리
	     * @method valRate
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valRate : function(ele, o){
			if(!o.numeric) return;
			var pattern = /[^0-9.]/;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v021');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description phone number 속성 처리
	     * @method valPhonenumber
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valPhonenumber : function(ele, o){
			if(!o.phonenumber) return;
			var pattern = /[^0-9]/;
			if(pattern.test(($(ele).val()).replace(/\s+/g,""))){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v016');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
			
		},

		valHangulalphanumeric : function(ele, o){
			if(!o.hangulalphanumeric) return;
			var pattern = /[^가-힣a-z0-9]/i;
			if(pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v017');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},
		
		valExcelfile : function(ele, o) {
			if(!o.excelfile) return;
            var pattern = /.(xls|xlsx)$/;
            if(!pattern.test($(ele).val())){
                this.error.result = true;
                this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v022');
                this.error.msgTitle =$(ele).attr('data-Title');
            }
		},
		
		valImageFile : function(ele, o) {
            if(!o.imagefile) return;
            var pattern = /.(xls|xlsx)$/;
            if(!pattern.test($(ele).val())){
                this.error.result = true;
                this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v023');
                this.error.msgTitle =$(ele).attr('data-Title');
            }
        },

		/**
	     * @description group check 속성 처리
	     * @method valGroupcheck
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valGroupcheck : function(ele, o){
			if(!o.groupcheck) return;
			var flag = false;
			ele = document.getElementsByName(ele.name);
			for(var i=0;i<ele.length;i++) 
				if(ele[i].checked) 
					flag = true;

			if(!flag){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v018');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description zip code 속성 처리
	     * @method valZipcode
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valZipcode : function(ele, o){
			if(!o.zipcode) return;
			var pattern = /^\d{3}-?\d{3}($)/;
			if(!pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v019');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},

		/**
	     * @description uniq 속성 처리
	     * @method valUniq
	     * @public
	     * @param element, classPatternValue
	     * @return void
	     */
		valUniq : function(ele, o){
			var beanId = o.uniq[0];
			var method = o.uniq[1];
			var parameterId = o.uniq[2];
			
			var map = new $.JMap();
			map.put($(ele).attr("id"), $(ele).val());
			
			if (parameterId) {
				parameterIds = this.bothTrim(parameterId).split(",");
				for (var i = 0 ; i < parameterIds.length ; i++) {
					var param = this.form.find("#" + parameterIds[i]);
					if (param.length > 0 && $(param).val() != "")
						map.put(parameterIds[i], $(param).val());
				}
			}

			var message = $.ajaxCall.submit({
				url: context+ '/userDefineAjax.do',
			    async : false,
			    type: 'POST',
			    beanId : beanId,
			    method : method,
			    data : map
			});
			
			if(message == "error") {
				this.error.breaked = true;
				return;
			}
			
			if(message.result != true){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v020');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
//			var validator = this;
//			var data = {};
//			data[$(ele).attr('name')] = encodeURIComponent($(ele).val());
//			o.uniq = o.uniq;
//			$.ajax({type : 'post', async : false, url : o.uniq, data : data, success : function(data){
//				if(data!='true'){
//					this.error.result = true;
//					this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v020');
//				}
//			}});
		},

		/**
	     * @description result
	     * @method setResult
	     * @public
	     * @param void
	     * @return void
	     */
		setResult : function(){
			var obj = {};
			obj.result = true;
			obj.msg = msg;
		},

		bothTrim : function(value){
			return $.trim(value); 
		},

		ucfirst : function(value){
			str = value.toString();
			var x = str.split(/\s+/g);
			for (var i = 0; i < x.length; i++) {
				var parts = x[i].match(/(\w)(\w*)/);
				x[i] = parts[1].toUpperCase() + parts[2].toLowerCase();
			}
			return x.join(' ');
		},
		
		/**
		 * @description date 속성 처리
		 * @method valDate
		 * @public
		 * @param element, classPatternValue
		 * @return void
		 */
		valDate : function(ele, o){
			if(!o.date || $.trim($(ele).val()) == '') return;
			var pattern = /^(2)\d{3}.(0[1-9]|1[012]).(0[1-9]|[12][0-9]|3[0-1])$/;
			if (!pattern.test($(ele).val())){
				this.error.result = true;
				this.error.msg = '[' + $(ele).attr('title') + '] ' + $.message.get('message_v056');
				this.error.msgTitle =$(ele).attr('data-Title');
			}
		},
	};
	$.fn.validator = $.validator.validate;
})(jQuery);

(function($) {
	$.onloadValidator = {
		helpText 	: null,
		form        : null,
		error 		: {
			result 	: false,
			type 	: 'alert',
			msg 	: null
		},
		
		validate  :  function(focusFlag){
			var elements = $(this).find($.validator.searchType);
			var validationCheckResult = true;
			$.onloadValidator.form = $(this);
			elements.each(function(index) {
				var classValue = $(this).attr("data-type");
				var classPatternValue = (classValue != undefined) ? classValue.match($.validator.pattern) : "";
				if (classPatternValue != null && classPatternValue != "") {
					validationCheckResult = $.onloadValidator.valid(this, classPatternValue[0]);
				}
				return validationCheckResult;
			});
			
			$.onloadValidator.form.find($.validator.searchType + "[data-required='true']").each(function() {
				if ($(this).attr("data-required") == "true") {
					var thElement = $(this).parent().prev();
					if(thElement.length > 0 && (thElement[0].tagName == "TH" || thElement[0].tagName == "th")) {
						if ($(this).attr("title") == undefined)
							$(this).attr("title", thElement.text().replace(/\*/g, ""));
						
						thElement.html(thElement.text().replace(/\*/g, "") + "<i>*</i>");
					}
					$(this).addClass("required");
				}
			});
			
			if ($(this).attr("data-required") == "true") {
				if (focusFlag && validationCheckResult)
					$(elements).first().select().focus();
			}
			
			return validationCheckResult;
		},
		
		reloadvalidate : function() {
			var elements = $(this).find($.validator.searchType);
			elements.each(function(index) {
				if (!$(this).hasClass("required")) {
					var $checkEle = $(this).parent().prev();
				    if($checkEle.length > 0 && $checkEle[0].tagName == "TH") {
				    	if ($checkEle.find("span").length > 0)
				    		$checkEle.find("span").remove();
				    }
				}
			});
			this.onloadValidator(false);
		},

		valid : function(element, classPatternValue){
			if(classPatternValue != null) {
				try {
					//var orule = eval('(' + classPatternValue + ')');
					var orule = ( new Function('return ' + '(' + classPatternValue + ')') )();
				} catch(e){
					this.error.result = false;
					this.error.msg = '[' + $(element).attr('name') + '] 필드내의 class 안에 표현식이 잘못된것 같습니다\n다시 확인해 주세요';
					this.error.msgTitle =$(element).attr('data-Title');
					this.invalidProcess(element, orule);
					return false;
				}
				
				for(var key in orule) {
					//if (key == 'label' || key == 'focusid' || (!orule.required && $(element).val() == "")) continue;
					if (key == 'label' || key == 'focusid') continue;
					var methodName = 'val' + this.ucfirst(key);
					if((this && this[methodName] && this[methodName] instanceof Function) == undefined){
						this.error.result = false;
						this.error.msg = 'class 속성 안에 존재하지 않는 메소드를 호출하였습니다 [' + key + ']';
						this.error.msgTitle =$(element).attr('data-Title');
					} else {
						this[methodName](element, orule);
					}
					if(this.error.result) {
						this.invalidProcess(element, orule);
						return false;
					}
				}
			}
			return true;
		},

		invalidProcess : function(ele, o){
			if(this.error.type == 'print') {
				$(ele.parentNode).append("<span class='error' style='color : blue;font-weight : bold'>" + this.error.msg + "</span>");
				if(o.focusid != undefined){
					$('#' + o.focusid).focus();
				} else {
					$(ele).focus();
				}
			} else {
//				alert(this.error.msg);
				layerPopObj.msg = this.error.msg;
				layerPopObj.msgTitle = this.error.msgTitle;
				$.layerPop(layerPopObj);
				if(o.focusid != undefined) {
					$('#' + o.focusid).focus();
				} else {
					$(ele).focus();
				}
			}
			this.initError();
		},

		initError : function(){
			this.error.result = false;
			this.error.msg = null;
			this.error.msgTitle =null;
		},
		
		valRequired : function(ele, o){
			if(!o.required)
				return;
			$(ele).addClass("required");
			var $checkEle = $(ele).parent().parent().prev();
		    if($checkEle.length > 0 && $checkEle[0].tagName == "TH") {
    			$checkEle.html("<span class='red'>" + $checkEle.html() + "</span>");
		    }
		},

		valMaxlength : function(ele, o){
			$(ele).attr('maxLength', o.maxlength);
		},
		
		valRange : function(ele, o) {
			if (o.range[0] >= o.range[1]) {
				$(ele).attr('maxLength', o.range[0]);
			} else {
				$(ele).attr('maxLength', o.range[1]);
			}
		},

		valNumeric : function(ele, o){
			$(ele).css({
				"text-align" : "right",
				"padding-right" : "2px",
				"ime-mode" : "disabled"
			});
			$(ele).numeric();
		},
		
		valMoney : function(ele, o) {
			this.valRate(ele, o);
		},
		
		valRate : function(ele, o){
			$(ele).css({
				"text-align" : "right",
				"padding-right" : "2px",
				"ime-mode" : "disabled"
			});
//			$(ele).css("text-align", "right");
//			$(ele).css("padding-right", "2px");
//			$(ele).css("ime-mode", "disabled"); 
			$(ele).numeric({allow:"."});
		},

		valAlpha : function(ele, o){
			$(ele).alpha();
		},

		valAlphanumeric : function(ele, o){
			$(ele).alphanumeric();
			$(ele).css("ime-mode", "disabled"); 
		},
		
		valAlphanumeric_ : function(ele, o){
			$(ele).alphanumeric({allow:"_"});
			$(ele).css("ime-mode", "disabled"); 
		},

		valPhonenumber : function(ele, o){
			$(ele).numeric({allow:" "});
		},

		valZipcode : function(ele, o){
			this.valNumeric(ele, o);
		},
		
		valGroupcheck : function(ele, o){
			ele = this.form.find("input[name="+ ele.name +"]");
			for(var i = 0 ; i< ele.length ; i++) {
				if (!$(ele[i]).is(".required")) {
					$(ele[i]).addClass("required");
					var $checkEle = $(ele[i]).parent().prev();
                    if($checkEle.length > 0 && $checkEle[0].tagName == "TH" && $checkEle.html().indexOf("* ") < 0) {
                        $checkEle.html("<span class='must'>* </span>" + $checkEle.text());
                    }
				}
			}
		},

		setResult : function(){
			var obj = {};
			obj.result = true;
			obj.msg = mrsg;
		},

		bothTrim : function(value){
			return $.trim(value); 
		},

		ucfirst : function(value){
			str = value.toString();
			var x = str.split(/\s+/g);
			for (var i = 0; i < x.length; i++) {
				var parts = x[i].match(/(\w)(\w*)/);
				x[i] = parts[1].toUpperCase() + parts[2].toLowerCase();
			}
			return x.join(' ');
		}
	};
	$.fn.onloadValidator = $.onloadValidator.validate;
	$.fn.reloadValidator = $.onloadValidator.reloadvalidate;
})(jQuery);

(function($){
	$.fn.alphanumeric = function(p) { 
		p = $.extend({
			ichars: "!@#$%^&*()+=[]\\\';,/{}|\":<>?~`.-_ ",
			nchars: "",
			allow: ""
		  }, p);	
		return this.each(function() {
			if (p.nocaps) p.nchars += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			if (p.allcaps) p.nchars += "abcdefghijklmnopqrstuvwxyz";
			
			s = p.allow.split('');
			for (var i=0;i<s.length;i++) if (p.ichars.indexOf(s[i]) != -1) s[i] = "\\" + s[i];
			p.allow = s.join('|');
			
			var reg = new RegExp(p.allow,'gi');
			var ch = p.ichars + p.nchars;
			ch = ch.replace(reg,'');

			$(this).keypress(function (e){
				if (!e.charCode) k = String.fromCharCode(e.which);
					else k = String.fromCharCode(e.charCode);
					
				if (ch.indexOf(k) != -1) e.preventDefault();
				if (e.ctrlKey&&k=='v') e.preventDefault();
				
			});
				
			$(this).bind('contextmenu',function () {return false;});
		});
	};

	$.fn.numeric = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();

		p = $.extend({
			nchars: az
		  }, p);	
		  	
		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
	
	$.fn.alpha = function(p) {
		var nm = "1234567890";

		p = $.extend({
			nchars: nm
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
        
    $.fn.decimal = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();

		p = $.extend({
			nchars: az,
			allow: ".,"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};   
	
	$.fn.currency = function(curr, p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();

		p = $.extend({
			nchars: az,
			allow: curr+".,"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};    
	
	
	$.fn.percent = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();

		p = $.extend({
			nchars: az,
			allow: ".,%"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
			
	};
	
	
	$.fn.email = function(p) {
		p = $.extend({
			allow: ".@_-"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
	
	$.fn.phone = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();
		
		p = $.extend({
			nchars: az,
			allow: ".-() "
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
	
	$.fn.clock = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();
		
		p = $.extend({
			nchars: az,
			allow: ":"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
	
	$.fn.date = function(p) {
		var az = "abcdefghijklmnopqrstuvwxyz";
		az += az.toUpperCase();
		
		p = $.extend({
			nchars: az,
			allow: "/-"
		  }, p);	

		return this.each (function() {
			$(this).alphanumeric(p);
		});
	};
})(jQuery);

//(^100(\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\.[0-9]{1,2})?$) 

//패스워드 부분 Check
function pwdValidator(pwd,pwdCk){
	var objPwd = new Object();
	var num = pwd.search(/[0-9]/g);
	var eng = pwd.search(/[a-z]/ig);
	var spe = pwd.search(/[`~!@@#$%^&*|₩₩₩'₩";:₩/?]/gi);
	if(pwdCk != null){
		if(pwd != pwdCk){
			objPwd.msg = $.message.get('message_new_M0002108');
			$.layerPop(objPwd);
			return false;
		} 
	}
	if(pwd.search(/\s/) != -1){
		objPwd.msg = $.message.get('message_new_M0002105');
		$.layerPop(objPwd);
		return false;
	}else if(num < 0 || eng < 0 || spe < 0 ){
		objPwd.msg = $.message.get('message_new_M0002105');
		$.layerPop(objPwd);
		return false;
	}
	return true;
}

